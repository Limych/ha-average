---
name: "Python testing"

on:
  push:
    branches:
      - master
      - main
      - dev
  pull_request:
  schedule:
    - cron: "23 3 * * 1"

jobs:
  lint:
    name: "Lint package"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - run: |
          echo "package=$(ls -F | grep \/$ | grep -v "bin\|examples\|tests" | sed -n "s/\///g;1p")" >> $GITHUB_ENV

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: "Cache pip"
        uses: actions/cache@v3
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          # Prefer requirements-dev.txt
          if [ -f requirements-dev.txt ]; then
            bin/install_requirements requirements-dev.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          elif [ -f requirements-test.txt ]; then
            bin/install_requirements requirements-test.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          elif [ -f requirements.txt ]; then
            bin/install_requirements requirements.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          fi

          if [ -d custom_components ]; then
            echo '"""Stub."""' >custom_components/__init__.py
          fi

      - name: "Lint with flake8 & pylint"
        run: |
          flake8 ${{ env.package }} tests
          pylint ${{ env.package }} tests

  tests:
    name: "Test package"
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: ['3.9', '3.10']
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Cache pip"
        uses: actions/cache@v3
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          # Prefer requirements-test.txt
          if [ -f requirements-test.txt ]; then
            bin/install_requirements requirements-test.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          elif [ -f requirements-dev.txt ]; then
            bin/install_requirements requirements-dev.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          elif [ -f requirements.txt ]; then
            bin/install_requirements requirements.txt "${{ secrets.ADMIN_GITHUB_TOKEN }}"
          fi
          pip install pytest-xdist

          if [ -d custom_components ]; then
            echo '"""Stub."""' >custom_components/__init__.py
          fi

      - name: "Run tests with pytest"
        if: matrix.python-version != '3.9'
        run: |
          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar
          ./bin/check_dirty

      - name: "Install Coveralls"
        if: matrix.python-version == '3.9'
        run: |
          pip install pytest-xdist coveralls

      - name: "Run tests with pytest & Calculate coverage"
        if: matrix.python-version == '3.9'
        run: |
          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar --cov --cov-report=
          ./bin/check_dirty

      - name: "Send coverage to Coveralls"
        if: matrix.python-version == '3.9'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github
